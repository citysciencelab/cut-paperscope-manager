/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	#include "Api.h"

	// Qt
	#include <QUrl>
	#include <QNetworkRequest>
	#include <QNetworkReply>
	#include <QJsonDocument>
	#include <QJsonParseError>
	#include <QJsonArray>
	#include <QByteArray>

	// App
	#include "Settings.h"



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	SINGLETON
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	// static properties
	bool Api::instanceFlag = false;
	Api* Api::apiInstance = nullptr;


	Api* Api::instance() {

		if (!instanceFlag) {
			apiInstance = new Api();
			instanceFlag = true;
		} 

		return apiInstance;
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	CONSTRUCTOR
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	Api::Api()
		: QObject(nullptr),
		  networkManager(nullptr)
	{
		// init properties
		baseUrl = Settings::instance()->getString("server_url","https://dev.hello-nasty.com/hcu/paperscope-prod/");

		// init member
		initSettings();
		initManager();
	}


	Api::~Api() {

		instanceFlag = false;

		if(networkManager) { delete networkManager; }
	}


	// getters
	QString Api::getBaseUrl() { return baseUrl; }



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	MANAGER
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	void Api::initManager() {

		// init network manager
		networkManager = new QNetworkAccessManager(this);
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	GET
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	void Api::get(QString url, std::function<void(QJsonObject data)> callback) {

		// create url
		QUrl qurl = baseUrl + url;

		// create request
		QNetworkRequest request(qurl);
		QNetworkReply *reply = networkManager->get(request);

		// handler
		connect(reply, &QNetworkReply::finished, [=]() { 
			
			// skip on error
			if(reply->error()) { return onError(reply); }

			// parse json data
			QJsonDocument doc = QJsonDocument::fromJson(reply->readAll());
			QJsonObject data = doc.object().value("data").toObject();

			callback(data); 
			reply->deleteLater();
		});
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	POST
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


    void Api::postResponse(QString url, QJsonObject json, std::function<void(QJsonObject data)> callback) {

		// create url
		QUrl qurl = baseUrl + url;

		// create request
		QJsonDocument doc(json);
		QByteArray data = doc.toJson();
		QNetworkRequest request(qurl);
		
		// create headers
        request.setRawHeader("Content-Type", "application/json");
		request.setRawHeader("X-Native-App", "true");
		request.setRawHeader("Accept", "application/json");
		request.setRawHeader("Accept-Language", "de");
		request.setRawHeader("Accept-Encoding", "gzip, deflate");
		request.setRawHeader("Authorization", "Bearer 9e2377d6-8e70-4ad7-8721-2a0b9c987967|7a7wQWQkWc0QJJR16eaKKJ1XMxYxSL1BFJXo0Wg68dca2f81");

		// send request
		QNetworkReply *reply = networkManager->post(request, data);

		// handler
		connect(reply, &QNetworkReply::finished, [=]() { 
			
			// skip on error
			if(reply->error()) { return onError(reply); }

			// parse json data
			QJsonDocument doc = QJsonDocument::fromJson(reply->readAll());

			callback(doc.object());
			reply->deleteLater();
		});
	}


	void Api::post(QString url, QJsonObject json, std::function<void(QJsonObject data)> callback) {

		// get response
		postResponse(url, json, [=](QJsonObject data) { 
		
			if(data.contains("data")) { data = data.value("data").toObject(); }
			callback(data);
		});
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	ERROR
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	void Api::onError(QNetworkReply *reply) {

		// log error
        QString errorMessage = reply->errorString();
		QString errorCode = reply->attribute(QNetworkRequest::HttpStatusCodeAttribute).toString();
		qDebug() << "Api-Error " << errorCode << ":" << errorMessage;

		// emit error
		emit error(errorMessage, errorCode.toInt(), reply->url().toString());

		reply->deleteLater();
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	SETTINGS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	void Api::initSettings() {

		// connect settings
		connect(Settings::instance(), &Settings::settingsUpdated, this, &Api::onSettingsUpdated);
	}


	void Api::onSettingsUpdated(QString key, QVariant value) {

		// update base url
		if(key == "server_url") { 
			baseUrl = value.toString(); 
		}
	}