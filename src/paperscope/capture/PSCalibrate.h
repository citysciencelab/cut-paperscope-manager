/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	#pragma once

	// Qt
	#include <QObject>

	// OpenCV
	#include <opencv2/opencv.hpp>

	// App
	#include "../PSTrackingMode.h"



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	CLASS DECLARATION
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


class PSCalibrate : public QObject {
	
	Q_OBJECT

	public:

		explicit PSCalibrate(QObject *parent = nullptr);
		~PSCalibrate();

		// processing
		void init();
		bool update(cv::Mat *mTracking, cv::Mat *mRender, PSTrackingMode trackingMode);
		void close();

		// interval
		int64 tickCount;
		int timeCount;

		// calibration
		void createCalibration();
		void saveCalibration(cv::Mat cameraMatrix, cv::Mat distCoeffs);

		int frameCount;
		std::vector<std::vector<cv::Point2f>> detectedCorners;


	signals:

		void calibrationCompleted();
};


